<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx">
	<fx:Script>
		<![CDATA[
			private var _securityServerSocket:ServerSocket;
			private var _dataServerSocket:ServerSocket;
			
			private var _clientList:Array = [];
			
			private function securityServerSocket_connectHandler( event:ServerSocketConnectEvent ):void
			{
				var clientSocket:Socket = event.socket;
				//发送策略文件
				var xml:XML = 
					<cross-domain-policy>
						<allow-access-from domain="*" to-ports="6000,6001"/>
					</cross-domain-policy>
				clientSocket.writeUTFBytes( xml.toString() );
				txtMsgReceived.appendText( xml.toString() + "\n" );
				clientSocket.flush();
				txtMsgReceived.appendText( "发送策略文件到" + clientSocket.remoteAddress + ":" + 
					clientSocket.remotePort + "\n" );
				clientSocket.close();
			}
			
			private function dataServerSocket_connectHandler( event:ServerSocketConnectEvent ):void
			{
				var clientSocket:Socket = event.socket;
				_clientList.push( clientSocket );
				
				clientSocket.addEventListener( ProgressEvent.SOCKET_DATA, clientSocket_socketDataHandler );
				clientSocket.addEventListener( Event.CLOSE, clientSocket_closeHandler );
				clientSocket.writeUTFBytes( "服务器消息: 你已连接到服务器" );
				clientSocket.flush();
				txtMsgReceived.appendText( "有新连接" + clientSocket.remoteAddress + ":" + 
					clientSocket.remotePort + "\n" );
			}
			
			private function clientSocket_closeHandler( event:Event ):void
			{
				var targetSocket:Socket = event.target as Socket;
				
				for ( var i:uint = 0; i < _clientList.length; i++ )
				{
					var socket:Socket = _clientList[ i ] as Socket;
					if ( socket.remoteAddress == targetSocket.remoteAddress && socket.remotePort == targetSocket.remotePort )
					{
						_clientList.splice( i, 1 );
					}
				}
				txtMsgReceived.appendText( socket.remoteAddress + ":" + socket.remotePort + "连接已断开\n" );
			}
			
			private function clientSocket_socketDataHandler( event:ProgressEvent ):void
			{
				var byteArray:ByteArray = new ByteArray();
				var clientSocket:Socket = event.target as Socket;
				clientSocket.readBytes( byteArray, 0, clientSocket.bytesAvailable );
				var receiveMessage:String = byteArray.toString();
				txtMsgReceived.appendText( receiveMessage + "\n" );
				
				//消息以#2开头，#3结束
				if ( receiveMessage.charCodeAt( 0 ) == 2 && receiveMessage.charCodeAt( receiveMessage.length - 1 ) == 3 )
				{
					var msgArray:Array = receiveMessage.split( String.fromCharCode( 3 ) );
					for each ( var msg:String in msgArray )
					{
						if ( msg.charCodeAt( 0 ) == 2 )
						{
							//去掉开头的#2
							msg = msg.slice( 1 );
							var msgObj:Object = JSON.parse( msg );
							var operation:String = msgObj.operation;
							switch( operation )
							{
								//心跳消息
								case "beattest":
									//向客户端回复心跳消息
									if ( chkHeartBeat.selected )
									{
										sendMessage( msg );
									}
									break;
							}
						}
					}
				}
			}
			
			private function convertStringToAscii( string:String ):String
			{
				var result:String = "";
				for ( var i:uint = 0; i < string.length; i++ )
				{
					result += string.charCodeAt( i ) + " ";
				}
				
				return result;
			}
			
			private function sendMessage( message:String ):void
			{
				for each ( var clientSocket:Socket in _clientList )
				{
					var msg:String = String.fromCharCode( 2 ) + message + String.fromCharCode( 3 );
					clientSocket.writeUTFBytes( msg );
					clientSocket.flush();
					txtMsgReceived.appendText( "发送：" + msg + "\n" );
				}
			}
			
			protected function btnSecuritySocket_clickHandler(event:MouseEvent):void
			{
				_securityServerSocket = new ServerSocket();
				_securityServerSocket.bind( int(txtSecurityPort.text), txtSecurityIp.text );
				_securityServerSocket.addEventListener( ServerSocketConnectEvent.CONNECT, 
					securityServerSocket_connectHandler );
				_securityServerSocket.listen();
				
			}
			
			protected function btnDataSocket_clickHandler(event:MouseEvent):void
			{
				_dataServerSocket = new ServerSocket();
				_dataServerSocket.bind( int(txtDataPort.text), txtDataIp.text );
				_dataServerSocket.addEventListener( ServerSocketConnectEvent.CONNECT, dataServerSocket_connectHandler );
				_dataServerSocket.listen();
				
			}
			
			protected function btnClearMsg_clickHandler(event:MouseEvent):void
			{
				txtMsgReceived.text = "";
				txtMsgSend.text = "";
			}
			
			protected function btnSendMsg_clickHandler(event:MouseEvent):void
			{
				for each ( var clientSocket:Socket in _clientList )
				{
					sendMessage( txtMsgSend.text );
				}
				
			}
			
		]]>
	</fx:Script>
	<s:VGroup height="100%" width="100%" 
			  paddingTop="5" paddingBottom="5" paddingLeft="5" paddingRight="5">
		<s:HGroup height="30" width="100%">
			<s:HGroup height="100%" width="50%" verticalAlign="middle">
				<s:Label text="安全服务"/>
				<s:TextInput id="txtSecurityIp" text="127.0.0.1" width="60"/>
				<s:TextInput id="txtSecurityPort" text="6000" width="40"/>
				<s:Button id="btnSecuritySocket" label="绑定" 
						  click="btnSecuritySocket_clickHandler(event)"/>
			</s:HGroup>
			
			<s:HGroup height="100%" width="50%" verticalAlign="middle">
				<s:Label text="数据服务"/>
				<s:TextInput id="txtDataIp" text="127.0.0.1" width="60"/>
				<s:TextInput id="txtDataPort" text="6001" width="40"/>
				<s:Button id="btnDataSocket" label="绑定" 
						  click="btnDataSocket_clickHandler(event)"/>
			</s:HGroup>
		</s:HGroup>
		
		<s:Label text="接受消息："/>
		<s:TextArea id="txtMsgReceived" height="100%" width="100%"/>
		
		<s:Label text="发送消息："/>
		<s:TextInput id="txtMsgSend" width="100%"/>
		
		<s:HGroup height="30" width="100%" horizontalAlign="center" verticalAlign="middle">
			<s:Button id="btnClearMsg" label="清除消息" 
					  click="btnClearMsg_clickHandler(event)"/>
			<s:Button id="btnSendMsg" label="发送消息" 
					  click="btnSendMsg_clickHandler(event)"/>
			<s:CheckBox id="chkHeartBeat" label="回复心跳消息" selected="true"/>
		</s:HGroup>
	</s:VGroup>
	
	
</s:WindowedApplication>
